# coding: utf-8
from . import load_data_from_file

def html_format(key, value):
	output = ''
	if not value:
		if key in ['notes', 'content_warnings', 'sources', 'series']:
			return '<span class="dim">None</span>'
		return 'N/A'
	elif type(value) == list:
		output = """
				<ul>"""
		for item in value:

			if key == 'content_warnings':
				_item = ''
				in_backtick = 0
				for char in item:
					if char == '`':
						if in_backtick == 0:
							in_backtick = 1
							_item += '<span class="spoiler">'
						elif in_backtick == 1:
							in_backtick = 0
							_item += '</span>'
						continue
					_item += char
				if in_backtick == 1:
					raise ValueError('unmatched "`" in content warning')
				item = _item

			output += f"""
					<li>{item}</li>"""
		output += """
				</ul>
			"""
	elif type(value) == dict:
		output = """
				<table>"""
		for _key, _value in value.items():
			if key == 'links':
				_value = f'<a href="{_value}">{_value}</a>'
			elif key == 'sources':
				_output_value = ''
				for word in _value.split(' '):
					if word.startswith('http'):
						_output_value += f'<a href="{word}">{word}</a>'
						continue
					_output_value += word
				_value = _output_value
			output += f"""
					<tr>
						<th>{_key}</th>
						<td>{_value}</td>
					</tr>"""
		output += """
				</table>
			"""
	else:
		return value
	return output

def generate_html(type, data):
	html = "<!-- The following table has been auto-generated by the generator, see https://github.com/FIXME/azeroy.neocities.org -->"
	values = ['title', 'type', 'account', 'series', 'status', 'length', 'release_date', 'links', 'content_warnings', 'notes', 'original_description', 'sources', 'for']

	html += f"""
	<table id="{type}-table">
		<thead>
			<tr>"""
	for value in values:
		html += """
				<th>{val}</th>""".format(val=value.replace('_', ' ').capitalize())
	html += """
			</tr>
		</thead>

		<tbody>"""

	for item in data:
		html += """
			<tr>"""

		for value in values:
			html += """
				<td>{parsed}</td>""".format(parsed=html_format(value, item.format(value)))

		html += """
			</tr>"""

	html += """
		</tbody>
	</table>
	<!-- End of auto-generated segment -->"""

	return html

def html_from_file(type, source):
	return generate_html(type, load_data_from_file(type, source))
